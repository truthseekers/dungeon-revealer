### THIS FILE IS AUTO GENERATED

"""
Instruction for establishing a live connection that is updated once the underlying data changes.
"""
directive @live(
  """
  Whether the query should be live or not.
  """
  if: Boolean = true
) on QUERY

type DiceRollOperatorNode implements DiceRollDetail {
  content: String!
}

interface DiceRollDetail {
  content: String!
}

type DiceRollConstantNode implements DiceRollDetail {
  content: String!
}

type DiceRollDiceRollNode implements DiceRollDetail {
  content: String!
  min: Float!
  max: Float!
  rollResults: [DiceRollResult!]!
}

type DiceRollResult {
  dice: String!
  result: Float!
  category: DiceRollCategory!
}

enum DiceRollCategory {
  DEFAULT
  MAX
  MIN
}

type DiceRollOpenParenNode implements DiceRollDetail {
  content: String!
}

type DiceRollCloseParenNode implements DiceRollDetail {
  content: String!
}

type UserChatMessage implements ChatMessage & TextChatMessage {
  id: ID!
  authorName: String!
  content: String!
  diceRolls: [DiceRoll!]!
  createdAt: String!
  containsDiceRoll: Boolean!
}

interface ChatMessage {
  id: ID!
}

interface TextChatMessage implements ChatMessage {
  id: ID!
  content: String!
  createdAt: String!
  containsDiceRoll: Boolean!
}

type DiceRoll {
  result: Float!
  detail: [DiceRollDetail!]!
}

type OperationalChatMessage implements ChatMessage & TextChatMessage {
  id: ID!
  content: String!
  createdAt: String!
  containsDiceRoll: Boolean!
}

type SharedResourceChatMessage implements ChatMessage {
  id: ID!
  authorName: String!
  resource: SharedResource
}

union SharedResource = Note | Image

type Note implements Node {
  id: ID!
  documentId: ID!
  title: String!
  content: String!
  contentPreview: String!
  createdAt: Int!
  viewerCanEdit: Boolean!
  viewerCanShare: Boolean!
  access: String!
  isEntryPoint: Boolean!
  updatedAt: Int!
}

interface Node {
  id: ID!
}

type Image implements Node {
  id: ID!
  imageId: ID!
  url: String!
}

type Query {
  chat(first: Int, after: ID): ChatMessageConnection!
  sharedSplashImage: Image
  users(first: Int, after: ID): ConnectedUserConnection!
  usersCount: Int!
  me: User!
  notes(first: Int, after: String, filter: NotesFilter): NoteConnection!
  notesSearch(first: Int, after: String, query: String): NoteSearchConnection!
  note(documentId: ID!): Note
  node(id: ID!): Node
}

type ChatMessageConnection {
  edges: [ChatMessageEdge!]!
  pageInfo: PageInfo!
}

type ChatMessageEdge {
  cursor: String!
  node: ChatMessage!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type ConnectedUserConnection {
  edges: [ConnectedUserEdge!]!
  pageInfo: PageInfo!
}

type ConnectedUserEdge {
  cursor: String!
  node: User!
}

type User {
  id: ID!
  name: String!
}

type NoteConnection {
  edges: [NoteEdge!]!
  pageInfo: PageInfo!
}

type NoteEdge {
  cursor: String!
  node: Note!
}

"""
A filter that can be applied to the paginated notes.
"""
enum NotesFilter {
  """
  Only return notes that are marked as entrypoints.
  """
  Entrypoint

  """
  Return all notes.
  """
  All
}

type NoteSearchConnection {
  pageInfo: PageInfo
  edges: [NoteSearchEdgeType!]!
}

type NoteSearchEdgeType {
  cursor: String!
  node: NoteSearchResultType!
}

type NoteSearchResultType {
  noteId: ID!
  documentId: ID!
  title: String!
  preview: String!
}

type Mutation {
  logIn(input: LogInInput): LogInResult!
  changeName(input: ChangeNameInput!): ChangeNameResult!
  chatMessageCreate(input: ChatMessageCreateInput!): Boolean
  shareResource(input: ShareResourceInput!): Boolean
  shareImage(input: ShareImageInput!): Boolean
  splashShareImage(input: SplashShareImageInput!): Boolean
  noteCreate(input: NoteCreateInput!): NoteCreateResult!
  noteDelete(input: NoteDeleteInput!): NoteDeleteResult!
  noteUpdateContent(input: NoteUpdateContentInput!): NoteUpdateResult!
  noteUpdateTitle(input: NoteUpdateTitleInput!): NoteUpdateResult!
  noteUpdateAccess(input: NoteUpdateAccessInput!): NoteUpdateResult!
  noteUpdateIsEntryPoint(input: NoteUpdateIsEntryPointInput!): NoteUpdateResult!
  requestTokenImageUpload(
    input: RequestTokenImageUploadInput!
  ): RequestImageTokenUploadResult!
  tokenImageCreate(input: TokenImageCreateInput!): TokenImageCreateResult!
}

type LogInResult {
  user: User!
}

input LogInInput {
  id: String!
  name: String!
}

type ChangeNameResult {
  me: User!
}

input ChangeNameInput {
  name: String!
}

input ChatMessageCreateInput {
  rawContent: String!
}

input ShareResourceInput {
  contentId: ID!
}

input ShareImageInput {
  imageId: ID!
}

input SplashShareImageInput {
  imageId: ID
}

type NoteCreateResult {
  note: Note!
}

input NoteCreateInput {
  title: String!
  content: String!
  isEntryPoint: Boolean!
}

type NoteDeleteResult {
  success: Boolean!
  deletedNoteId: ID!
}

input NoteDeleteInput {
  noteId: String!
}

type NoteUpdateResult {
  note: Note
}

input NoteUpdateContentInput {
  id: String!
  content: String!
}

input NoteUpdateTitleInput {
  id: String!
  title: String!
}

input NoteUpdateAccessInput {
  id: String!
  access: String!
}

input NoteUpdateIsEntryPointInput {
  id: String!
  isEntryPoint: Boolean!
}

union RequestImageTokenUploadResult =
    RequestTokenImageUploadDuplicate
  | RequestTokenImageUploadUrl

type RequestTokenImageUploadDuplicate {
  """
  The TokenImage that already exists for the given hash.
  """
  tokenImage: TokenImage!
}

type TokenImage implements Node {
  id: ID!
  url: String!
}

type RequestTokenImageUploadUrl {
  uploadUrl: String!
}

input RequestTokenImageUploadInput {
  """
  The SHA256 of the file that is going to be uploaded in hexadecimal form.
  """
  sha256: String!

  """
  The extension of the file thats is going to be uploaded.
  """
  extension: String!
}

union TokenImageCreateResult = TokenImageCreateSuccess | TokenImageCreateError

type TokenImageCreateSuccess {
  createdTokenImage: TokenImage!
}

type TokenImageCreateError {
  reason: String!
}

input TokenImageCreateInput {
  """
  The SHA256 of the file that is going to be uploaded in hexadecimal form.
  """
  sha256: String!

  """
  The SHA256 of the file the image got cut out from in hexadecimal form.
  """
  sourceSha256: String
}

type Subscription {
  userUpdate: UserUpdateSubscription!
  chatMessagesAdded: ChatMessagesAddedSubscription!
  notesUpdates(
    filter: NotesFilter
    endCursor: String!
    hasNextPage: Boolean!
  ): NotesUpdates!
}

union UserUpdateSubscription =
    UserAddUpdate
  | UserRemoveUpdate
  | UserChangeUpdate

type UserAddUpdate {
  user: User!
  usersCount: Int!
}

type UserRemoveUpdate {
  userId: ID!
  usersCount: Int!
}

type UserChangeUpdate {
  user: User!
}

type ChatMessagesAddedSubscription {
  messages: [ChatMessage!]!
}

type NotesUpdates {
  """
  A node that was added to the connection.
  """
  addedNode: NotesConnectionEdgeInsertionUpdate

  """
  A note that was updated.
  """
  updatedNote: Note

  """
  A note that was removed.
  """
  removedNoteId: ID
}

type NotesConnectionEdgeInsertionUpdate {
  """
  The cursor of the item before which the node should be inserted.
  """
  previousCursor: String

  """
  The edge that should be inserted.
  """
  edge: NoteEdge
}
